---
title: "Data Tidying"
author: "Jessica Ernakovich"
date: "1/16/2019"
output:
  pdf_document: default
  html_document: default
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Loading packages
We need to call these packages when they are needed for a program, even though it's installed  
It's good practice to include all your library calls in one chunk  



```{r, warming = F, message = F}

library(dplyr)
library(tidyr) 
library(plotrix) #julia told me about this and I didn't use it, but it can give you std err
```

this will give a warning message about certain packages because their names are redundant to this package and others. By default, RStudio will assume you want to call the function from the most recently loaded library. 

If necessary, you can call from the other package using the package_name::function_name(...)



# Data Cleaning


Read in the datafile
```{r}
catch_df <- read.csv(url("https://knb.ecoinformatics.org/knb/d1/mn/v2/object/df35b.302.1", method = "libcurl"),
                    stringsAsFactors = FALSE)
head(catch_df)
```
cmd + shift + M will result in `%>%`, the pipe operator (which allows operations to be linked)

* remove marginal sum and notes column
* move from wide to long format

```{r}

catch_long <- catch_df %>% 
  select(Region, Year, Chinook, Sockeye, Coho, Pink, Chum) %>% 
  gather(key = "species", value = "catch", -Year, -Region)

#including function calls on new lines makes this cleaner, but is unnecessary
#could also have used "-" to just drop the columns we wanted to get rid of. 

head(catch_long)

```
If `<-` reads as "gets" and ` %>%` reads as "then", then the first two lines above read: catch_cleaned gets the catch_df then a select of the catch_df.


* erroneious value due to OCR issue - change "I" to one
* create "catch" column that multiplies by 1000 to get true numbers

```{r}
catch_cleaned <- catch_long %>% 
  rename(catch_thousands = catch) %>% 
mutate(catch_thousands = ifelse(catch_thousands == "I", 1, catch_thousands)) %>% 
mutate(catch_thousands = as.integer(catch_thousands))  %>% 
mutate(catch = catch_thousands *1000)

tail (catch_cleaned) #tail is more meaningful than head in this case, because the head is all zero's
```

There are some values in the catch_thousands column that are not integers, but rather text. So, we are trying to find and force to be integers. But, it didn't work. So then we looked for it with the "which" command. And then we visualized it. Next, we will change this to a number. 
```{r, eval = F, echo = F}
# I used this code to find the bad value
# eval = F means that it won't run, echo = F means not to knit it
test_catch <- as.integer(catch_cleaned$catch_thousands) #trying to force to be integers, but it delivers that "NAs are introduced by coercion"

i <- which(is.na(test_catch) ==T) #this will return whatever value is true for this
catch_cleaned[i, ]   #[row i, all colums] so we can find the problem



```

# Split-Apply-Combine
 
 
 Calculate total catch by region
 
```{r}
catch_total <- catch_cleaned %>% 
  group_by(species, Year) %>% 
  summarize(catch_region = sum(catch),  
            average = mean(catch), 
            stderr = std.error(catch), #from plotrix package
            n_obs = n())

catch_total
```
 
 Filter for Chinook Salmon
 
```{r}
#names(catch_cleaned)
catch_chinook <- catch_cleaned %>% 
  filter(species == "Chinook" & Region == "SSE" & Year > 1990) %>% 
# "|" is called a logical "or"
  arrange(-Year)
  
head(catch_chinook)
```
 

# Joins

we will be using a left join to join the region definition to the catch data


using a left join will mean that the number of rows are defined by the left dataframe. The column numbers will be the columns from left + the column from right - the number of key columns. 

```{r}
region_defs <- read.csv(url("https://knb.ecoinformatics.org/knb/d1/mn/v2/object/df35b.303.1", method = "libcurl"),
                        stringsAsFactors = FALSE)

head(region_defs)
```

Cleaning up a bit by keeping only the columns we want. 
```{r}
region_clean <- region_defs %>% 
  select(code, mgmtArea)

head(region_clean)

```

Now it's time for the join.
```{r}
catch_joined <- left_join(catch_cleaned, region_clean, #join syntax changes a bit
                          by = c("Region" = "code")) 

head(catch_joined)
```


# Spread

Long format to wide format for data display

```{r}
catch_wide <- catch_cleaned %>% 
  filter(Year>1990) %>% 
    select(-catch_thousands) %>%
  spread(key = Year, value = catch) 
  
head(catch_wide)
```


# Seperate and unite

some fake data
ISO date formate is: YYYY-MM-DD
```{r}
dates_df <- data.frame(date = c("5/24/1930",
                                "5/25/1930",
                                "5/26/1930",
                                "5/27/1930",
                                "5/28/1930"),
                       stringsAsFactors = FALSE)

dates_df
```

```{r}
dates_sep <- dates_df %>% 
  separate(col = date, into = c("month", "day", "year"), by = "/", remove = F)

head(dates_sep)
```

```{r}
dates_unite <- dates_sep %>% 
  unite(date_iso, year, month, day, sep = "-")

head(dates_unite)
#these don't look amazing because the dates and months are one rather than 2 digits. use "stringer" package
```



